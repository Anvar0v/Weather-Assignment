// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherAssignment.Data.Data;

#nullable disable

namespace WeatherAssignment.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherAssignment.Data.Models.CurrentWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("WeatherCode")
                        .HasColumnType("int");

                    b.Property<Guid>("WeatherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<double>("Windspeed")
                        .HasColumnType("float");

                    b.Property<int>("is_Day")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeatherId")
                        .IsUnique();

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("WeatherAssignment.Data.Models.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Elevation")
                        .HasColumnType("float");

                    b.Property<double>("Generationtime_ms")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone_abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Utc_offset_seconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("WeatherAssignment.Data.Models.CurrentWeather", b =>
                {
                    b.HasOne("WeatherAssignment.Data.Models.Weather", "Weather")
                        .WithOne("Current_Weather")
                        .HasForeignKey("WeatherAssignment.Data.Models.CurrentWeather", "WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("WeatherAssignment.Data.Models.Weather", b =>
                {
                    b.Navigation("Current_Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
